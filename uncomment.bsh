/*
* Author: Simon Wimmer
*
* Attempts to uncomment a the current cursor position if no text is selected.
* For cancel, old-style and new-style comments, and Latex output hiding markers.
*/

int findMatchingBrace(int start, String left, String right)
{
  int count = 0;
  right_len = right.length();
  left_len = left.length();

  for (int i = start; i < buffer.getLength() - right_len; i++) {
    if (buffer.getText(i, left_len).equals(left)) {
      count++;
    } else if (buffer.getText(i, right_len).equals(right)) {
      if(count > 0) {
        count--;
      } else {
        return i;
      }
    }
  }

  return -1;
}

boolean removeComment(String marker, String left, String right)
{

  // No selection -- attempt to remove comment marker and cartouches
  start = textArea.getCaretPosition();

  // Remove marker
  if (!buffer.getText(start, marker.length()).equals(marker)) return false;
  buffer.remove(start, marker.length());

  // Remove whitespace
  while (buffer.getText(start, 1).equals(" ")) {
    buffer.remove(start, 1);
  }

  // Remove left cartouche
  if (!buffer.getText(start, left.length()).equals(left)) return false;
  buffer.remove(start, left.length());

  // Find matching cartouche
  end = findMatchingBrace(textArea.getCaretPosition(), left, right);
  if (end >= 0)
  {
    buffer.remove(end, right.length());
    return true;
  }
  
  return false;
}

void removeFirstComment() {
  String[] markers = new String[]{ "\<^cancel>", "\<comment>", "", "" };
  String[] lefts = new String[]{ "\<open>", "\<open>", "(*<*)", "(*" };
  String[] rights = new String[]{ "\<close>", "\<close>", "(*>*)", "*)" };
  for (int i = 0; i < markers.length; i++) {
    if (removeComment(markers[i], lefts[i], rights[i]))
      return;
  }
}

if(buffer.isReadOnly())
	Macros.error(view, "Buffer is read-only.");
else
  removeFirstComment();